Design Notes

Should this be a UInt package? Or something like BinaryArray instead.
- Not really intended for doing maths.
- Only mathmatical operations needed for target project
  are x == 0 or x > 0; Could simplify to IsZero and cut out
  a lot of noise.
- Need a "left to right" view rather than most / least significant
  view on the binary. ie, each bit is of equal significance.


Should I use a proxy to map bit access to chunked access?
- Main question is performance. Proxys are slow. Does
  this effect my use case, since the underlying data type
  doesn't actually have bit level array level access?
- For the target use case I'll probably be setting way
  more than one bit at a time, which will need to be done
  by functions anyway. Can provide array [] access and
  more efficient function getting setting as well?

Flex expansion:
- How should these grow and shrink?
  - When two mismatched size are used in a bitwise or comparison operation : Grow to match biggest
  - When an index larger than the current length is used to set: Grow to index or nearest byte?: Grow to index.
  - When an index larger than the current length is used to get: No action? Or Grow to index?: No action. Return undefined (like normal array)
  - Do shift operations cause expansios: Probs not, create growAndShiftLeft and growAndShiftRight(growBy, shiftBy)
- Should we provide a way of specifying the default padding value during expansion: No,leave this out. Zero is used.
  - 0 is default: yah
  - 1 setable: through a property or shoehorn it into the constructor?
- Add some functions to grow / shrink

// Fast vs Slow operations

If we know ahead of time that we are using
fixed size and fixed chunkSize Uints, we can 
do bitwise and comparison operations much more
quickly because we will be omitting size 
and chunkType checks and coalescing.

For instance, when we don't have this info,
we need to check:
- Same size
- Same chunk size
- If either don't match, we need to pad. Doing
  so increases cpu cycles and memory usage.